import numpy as np
import pandas as pd
import math
import os
import glob
import pydicom
import re
import SimpleITK as sitk
import matplotlib.pyplot as plt

#T2dir = '/data/prostate/postimages/PostImages2/'
#coredir = '/data/prostate/postimages/Labels/'

T2dir = '/Users/Leo/Desktop/Temp/'
coredir = '/Users/Leo/Desktop/Temp/'


os.chdir(T2dir)

paththreshold = 'All'
coreradius = 3

# transform constats
anglex = 15
angley = 0
anglez = 0


def rotateImage(original, physicalcenter, anglex, angley, anglez):
    # returns the 'rotated' 3d image about the physical center that is resampled
    #  based on the original image
    # original is the original image
    #   angle z is tilt in the superior/inferior (i.e trendelenburg)
    #   angle y is rotating the body like a propeller blade
    #   angle x is twisting the body like a rolling pin
    interpolator = sitk.sitkLinear
    radx = anglex * math.pi / 180
    rady = angley * math.pi / 180
    radz = anglez * math.pi / 180

    transform = sitk.Euler3DTransform()
    transform.SetCenter(physicalcenter)
    transform.SetRotation(radz, rady, radx)    # note the order is z, y, x

    rotatedImage = sitk.Resample(original, original, transform, interpolator)
    return rotatedImage


def flipImage(original):
    flipped = sitk.Flip(original, [True, False, False])

    return flipped

def histoNormalize(original, alpha, beta, window):
    interpolator = sitk.sitkLinear
    filter = sitk.AdaptiveHistogramEqualizationImageFilter()
    filter.SetAlpha = alpha
    filter.SetBeta = beta
    filter.SetWindow = window

    normalized = sitk.Resample(original, original, filter, interpolator)
    return normalized

writer = sitk.ImageFileWriter()


alpha = 1.0
beta = 0.0
window = 512

# run through resampled ADC files
#for ADCfile in glob.glob('*ADCresampled.mha'):
#    accession = ADCfile.split('_')[0]


if 0 == 0:
    accession = '8099139'
    ADCfile = accession + '_ADCresampled.mha'

    # read files into images
    T2file = accession + '_T2.mha'
    corefile = accession + '_cores_r' + str(coreradius) + '_g' + str(paththreshold) + '.mha'

    T2path = os.path.join(T2dir, T2file)
    ADCpath = os.path.join(T2dir, ADCfile)
    corepath = os.path.join(coredir, corefile)

    T2image = sitk.ReadImage(T2path, sitk.sitkFloat32)
    ADCimage = sitk.ReadImage(ADCpath, sitk.sitkFloat32)
    coreimage = sitk.ReadImage(corepath, sitk.sitkInt8)

    # finds the center of the MR scan in physical coordinates
    shape = np.array(T2image.GetSize())
    pixelcenter = (shape / 2).astype(int).tolist()
    physicalcenter = T2image.TransformIndexToPhysicalPoint(pixelcenter)

    rotatedT2 = rotateImage(T2image, physicalcenter, anglex, angley, anglez)

    flippedT2 = flipImage(T2image)
    rotatedCore = rotateImage(coreimage, physicalcenter, anglex, angley, anglez)
    rotatedADC = rotateImage(ADCimage, physicalcenter, anglex, angley, anglez)

    print(flippedT2.GetDirection())

    T2outname = accession + '_T2rotate5.mha'
    T2flipname = accession + '_T2flip2.mha'
    T2normname = accession + '_T2normalize1.mha'
    ADCrotatename = accession + '_ADCrotate1.mha'


    print(sitk.GetArrayFromImage(T2image))
    print('---')
    print(sitk.GetArrayFromImage(flippedT2))
    #normalizedT2 = histoNormalize(T2image, alpha, beta, window)
    #sitk.WriteImage(normalizedT2, os.path.join(T2dir, T2normname))
    sitk.WriteImage(rotatedADC, os.path.join(T2dir, ADCrotatename))
    #sitk.WriteImage(rotatedCore, os.path.join(T2dir, corerotatename))
    #sitk.WriteImage(rotatedT2, os.path.join(T2dir, T2outname))
    #sitk.WriteImage(flippedT2, os.path.join(T2dir, T2flipname))
